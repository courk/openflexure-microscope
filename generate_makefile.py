#!python
import re

"""This script generates the Makefile for the Openflexure Microscope.

It is intended to be run whenever you need a new makefile.  The makefile lives in
the repository and is versioned, so most people never need to run this script.
"""

body_versions = ["SS40", "SS40-M", "LS65", "LS65-M", "LS75", "LS75-M"]

cameras = ["picamera_2", "logitech_c270", "m12"]
lenses = ["pilens", "c270_lens", "m12_lens", "rms_f40d16", "rms_f50d13"]
optics_versions_SS40 = ["picamera_2_pilens", "logitech_c270_c270_lens"]
optics_versions_LS65 = [cam + "_" + lens for cam in cameras for lens in lenses if "rms" in lens] + ["m12_m12_lens"]
optics_versions = [v + "_SS40" for v in optics_versions_SS40] + [v + "_LS65" for v in optics_versions_LS65]

illumination_versions = [body + condenser + tall for body in body_versions 
                                                 for condenser in ["", "_condenser"] 
                                                 for tall in ["", "_tall"] 
                                                 if "-M" not in body]

def body_parameters(version):
    """Retrieve the parameters we pass to OpenSCAD to generate the given body version."""
    p = {"motor_lugs": False, "sample_z":-1, "big_stage":None}
    matching_version = ""
    for v in body_versions: # first, pick the longest matching version string.
        if v in version and len(v) > len(matching_version):
            matching_version = v
    m = re.match("(LS|SS)([\d]{2})((-M){0,1})", matching_version)
    p["big_stage"] = m.group(1)=="LS"
    p["motor_lugs"] = m.group(4)=="-M"
    p["sample_z"] = m.group(2)
    return p
    
def optics_module_parameters(version):
    """Figure out the parameters we need to generate the optics module"""
    m = re.search("({cam})_({lens})_({body})".format(
                            cam="|".join(cameras), 
                            lens="|".join(lenses),
                            body="|".join(body_versions)), 
                        version)
    p = {"camera": m.group(1), "optics": m.group(2)}
    p.update(body_parameters(m.group(3)))
    return p
    
def illumination_parameters(version):
    """Figure out the parameters required for an illumination module"""
    p = body_parameters(version)
    p["condenser"] = "_condenser" in version
    if "_tall" in version:
        p["foot_height"] = 26
    return p

def openscad_recipe(**kwargs):
    output = "\t" + "openscad -o $@"
    for name, value in kwargs.iteritems():
        if type(value) == type(True): #need to convert boolean values
            value = "true" if value else "false"
        output += " -D {name}={value}".format(name=name, value=str(value))
    output += " $<\n"
    return output
    


if __name__ == "__main__":
    with open("Makefile","w") as makefile:
        def M(line):
            makefile.write(line + "\n")
        M("# Makefile for the openflexure microscope")
        M("# Generated by generate_makefile.py")
        M(".PHONY: all cleanstl")
        M("")
        M("SOURCE = openscad")
        M("OUTPUT = builds")
        M("")
        M("body_versions = " + " ".join(body_versions))
        M("optics_versions = " + " ".join(optics_versions))
        M("illumination_versions = " + " ".join(illumination_versions))
        M("")
        M("TOOLS := actuator_assembly_tools condenser_lens_tool tube_lens_tool")
        M("COMMONPARTS := feet feet_tall gears sample_clips")
        M("BODIES := $(body_versions:%=main_body_%)")
        M("OPTICS := $(optics_versions:%=optics_%)")
        M("ILLUMINATIONS := $(illumination_versions:%=illumination_and_rear_foot_%)")
        M("ALLPARTS := $(COMMONPARTS) $(TOOLS) $(BODIES) $(ILLUMINATIONS)")
        M("ALLSTLFILES := $(ALLPARTS:%=$(OUTPUT)/%.stl)")
        M("")
        M("parameters_file := $(SOURCE)/microscope_parameters.scad")
        M("utilities_file := $(SOURCE)/utilities.scad")
        M("all_deps := $(parameters_file) $(utilities_file) 			#All targets depend on these")
        M("")
        M("all: $(ALLSTLFILES)")
        M("")
        M("cleanstl:")
        M("\t"+"rm $(STLFILES)")
        M("")
        M("#parameter and utilities files affect everything")
        M("$(OUTPUT)/%.stl: $(all_deps)")
        M("")
        M("main_body_dep_names := compact_nut_seat dovetail logo")
        M("main_body_deps := $(main_body_dep_names:%=$(SOURCE)/%.scad)")
        for version in body_versions:
            M("$(OUTPUT)/main_body_" + version + ".stl: $(SOURCE)/main_body.scad $(main_body_deps)")
            M(openscad_recipe(**body_parameters(version)))
        M("")
        M("illumination_dep_names := dovetail optics")
        M("illumination_deps := $(illumination_dep_names:%=$(SOURCE)/%.scad)")
        for version in illumination_versions:
            M("$(OUTPUT)/illumination_and_rear_foot_" + version + ".stl: $(SOURCE)/illumination_and_rear_foot.scad $(illumination_deps) ")
            M(openscad_recipe(**illumination_parameters(version)))
        M("")
        M("optics_dep_names := dovetail cameras/camera")
        M("optics_deps := $(optics_dep_names:%=$(SOURCE)/%.scad)")
        for version in optics_versions:
            M("$(OUTPUT)/optics_" + version + ".stl: $(SOURCE)/optics.scad $(optics_deps)")
            M(openscad_recipe(**optics_module_parameters(version)))
        M("")
        M("$(OUTPUT)/%.stl: $(SOURCE)/%.scad $(all_deps)")
        M("\t" + "openscad -o $@ $<")
        M("")
